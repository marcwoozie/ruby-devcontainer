# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/csv/all/csv.rbi
#
# csv-3.3.2

class CSV
  def <<(row); end
  def add_row(row); end
  def binmode(*args, **, &block); end
  def binmode?; end
  def build_fields_converter(initial_converters, options); end
  def build_header_fields_converter; end
  def build_parser_fields_converter; end
  def build_writer_fields_converter; end
  def close(*args, **, &block); end
  def close_read(*args, **, &block); end
  def close_write(*args, **, &block); end
  def closed?(*args, **, &block); end
  def col_sep; end
  def convert(name = nil, &converter); end
  def convert_fields(fields, headers = nil); end
  def converters; end
  def determine_encoding(encoding, internal_encoding); end
  def each(&block); end
  def encoding; end
  def eof; end
  def eof?; end
  def external_encoding(*args, **, &block); end
  def fcntl(*args, **, &block); end
  def field_size_limit; end
  def fileno(*args, **, &block); end
  def flock(*args); end
  def flush(*args, **, &block); end
  def force_quotes?; end
  def fsync(*args, **, &block); end
  def gets; end
  def header_convert(name = nil, &converter); end
  def header_converters; end
  def header_fields_converter; end
  def header_row?; end
  def headers; end
  def initialize(data, col_sep: nil, row_sep: nil, quote_char: nil, field_size_limit: nil, max_field_size: nil, converters: nil, unconverted_fields: nil, headers: nil, return_headers: nil, write_headers: nil, header_converters: nil, skip_blanks: nil, force_quotes: nil, skip_lines: nil, liberal_parsing: nil, internal_encoding: nil, external_encoding: nil, encoding: nil, nil_value: nil, empty_value: nil, strip: nil, quote_empty: nil, write_converters: nil, write_nil_value: nil, write_empty_value: nil); end
  def inspect; end
  def internal_encoding(*args, **, &block); end
  def ioctl(*args); end
  def isatty(*args, **, &block); end
  def liberal_parsing?; end
  def line; end
  def lineno; end
  def max_field_size; end
  def normalize_converters(converters); end
  def parser; end
  def parser_enumerator; end
  def parser_fields_converter; end
  def parser_options; end
  def path; end
  def pid(*args, **, &block); end
  def pos(*args, **, &block); end
  def pos=(*args, **, &block); end
  def puts(row); end
  def quote_char; end
  def raw_encoding; end
  def read; end
  def readline; end
  def readlines; end
  def reopen(*args, **, &block); end
  def return_headers?; end
  def rewind; end
  def row_sep; end
  def seek(*args, **, &block); end
  def self.create_stringio(str, mode, opts); end
  def self.filter(input = nil, output = nil, **options); end
  def self.foreach(path, mode = nil, **options, &block); end
  def self.generate(str = nil, **options); end
  def self.generate_line(row, **options); end
  def self.generate_lines(rows, **options); end
  def self.instance(data = nil, **options); end
  def self.may_enable_bom_detection_automatically(filename_or_io, mode, options, file_opts); end
  def self.open(filename_or_io, mode = nil, **options); end
  def self.parse(str, **options, &block); end
  def self.parse_line(line, **options); end
  def self.read(path, **options); end
  def self.readlines(path, **options); end
  def self.table(path, **options); end
  def shift; end
  def skip_blanks?; end
  def skip_lines; end
  def stat(*args); end
  def string(*args, **, &block); end
  def sync(*args, **, &block); end
  def sync=(*args, **, &block); end
  def tell(*args, **, &block); end
  def to_i; end
  def to_io; end
  def truncate(*args, **, &block); end
  def tty?(*args, **, &block); end
  def unconverted_fields?; end
  def write_headers?; end
  def writer; end
  def writer_fields_converter; end
  def writer_options; end
  extend Forwardable
  include Enumerable
end
class CSV::MalformedCSVError < RuntimeError
  def initialize(message, line_number); end
  def line_number; end
  def lineno; end
end
class CSV::InvalidEncodingError < CSV::MalformedCSVError
  def encoding; end
  def initialize(encoding, line_number); end
end
class CSV::FieldInfo < Struct
  def header; end
  def header=(_); end
  def index; end
  def index=(_); end
  def line; end
  def line=(_); end
  def quoted?; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class CSV::TSV < CSV
  def initialize(data, **options); end
end
class Object < BasicObject
  def CSV(*args, **options, &block); end
end
